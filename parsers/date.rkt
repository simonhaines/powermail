#lang racket
(require
 (planet dvanhorn/packrat)
 (planet bzlib/date/srfi)
 "util.rkt")

(require test-engine/racket-tests)

(define <date>
  (parse <date>
         (<date>
          ((d := <date-spec>) d)
          (('#\o '#\n <space> d := <date-spec>) d)
          (('#\n '#\e '#\x '#\t <space> d := <day-of-week>) (list d))
          (('#\n '#\e '#\x '#\t <space> m := <month-name>) (list m))
          (('#\t '#\h '#\i '#\s <space> d := <day-of-week>) (list d))
          (('#\t '#\h '#\i '#\s <space> m := <month-name>) (list m))
          (('#\t '#\o '#\d '#\a '#\y)
           (let ([today (current-date)])
             (list (cons 'year (date-year today))
                   (cons 'month (date-month today))
                   (cons 'day (date-day today)))))
          (('#\t '#\o '#\m '#\o '#\r '#\r '#\o '#\w)
           (let ((tomorrow (date+ (current-date) 1)))
             (list (cons 'year (date-year tomorrow))
                   (cons 'month (date-month tomorrow))
                   (cons 'day (date-day tomorrow))))))
         (<date-spec>
          ((m := <month-name> <space> d := <day-number> '#\, <space> y := <year>) (list y m d))
          ((m := <month-name> <space> d := <day-number> <space> y := <year>) (list y m d))
          ((m := <month-name> <space> d := <day-number>) (list m d))
          ((d := <day-number> <space> m := <month-name> '#\, <space> y := <year>) (list y m d))
          ((d := <day-number> <space> m := <month-name> <space> y := <year>) (list y m d))
          ((d := <day-number> <space> m := <month-name>) (list m d))
          ((d := <slash-date>) d)
          ((d := <dash-date>) d)
          ((d := <dot-date>) d))
         (<month-name>
          (('#\j '#\a '#\n '#\u '#\a '#\r '#\y) '(month . 1))
          (('#\j '#\a '#\n) '(month . 1))
          (('#\f '#\e '#\b '#\r '#\u '#\a '#\r '#\y) '(month . 2))
          (('#\f '#\e '#\b) '(month . 2))
          (('#\m '#\a '#\r '#\c '#\h) '(month . 3))
          (('#\m '#\a '#\r) '(month . 3))
          (('#\a '#\p '#\r '#\i '#\l) '(month . 4))
          (('#\a '#\p '#\r) '(month . 4))
          (('#\m '#\a '#\y) '(month . 5))
          (('#\j '#\u '#\n '#\e) '(month . 6))
          (('#\j '#\u '#\n) '(month . 6))
          (('#\j '#\u '#\l '#\y) '(month . 7))
          (('#\j '#\u '#\l) '(month . 7))
          (('#\a '#\u '#\g '#\u '#\s '#\t) '(month . 8))
          (('#\a '#\u '#\g) '(month . 8))
          (('#\s '#\e '#\p '#\t '#\e '#\m '#\b '#\e '#\r) '(month . 9))
          (('#\s '#\e '#\p) '(month . 9))
          (('#\o '#\c '#\t '#\o '#\b '#\e '#\r) '(month . 10))
          (('#\o '#\c '#\t) '(month . 10))
          (('#\n '#\o '#\v '#\e '#\m '#\b '#\e '#\r) '(month . 11))
          (('#\n '#\o '#\v) '(month . 11))
          (('#\d '#\e '#\c '#\e '#\m '#\b '#\e '#\r) '(month . 12))
          (('#\d '#\e '#\c) '(month . 12)))
         (<day-of-week>
          (('#\s '#\u '#\n '#\d '#\a '#\y) '(day-of-week 0))
          (('#\s '#\u '#\n) '(day-of-week 0))
          (('#\m '#\o '#\n '#\d '#\a '#\y) '(day-of-week 1))
          (('#\m '#\o '#\n) '(day-of-week 1))
          (('#\t '#\u '#\e '#\s '#\d '#\a '#\y) '(day-of-week 2))
          (('#\t '#\u '#\e) '(day-of-week 2))
          (('#\w '#\e '#\d '#\n '#\e '#\s '#\d '#\a '#\y) '(day-of-week 3))
          (('#\w '#\e '#\d) '(day-of-week 3))
          (('#\t '#\h '#\u '#\r '#\s '#\d '#\a '#\y) '(day-of-week 4))
          (('#\t '#\h '#\u) '(day-of-week 4))
          (('#\f '#\r '#\i '#\d '#\a '#\y) '(day-of-week 5))
          (('#\f '#\r '#\i) '(day-of-week 5))
          (('#\s '#\a '#\t '#\u '#\r '#\d '#\a '#\y) '(day-of-week 6))
          (('#\s '#\a '#\t) '(day-of-week 6)))
         (<day-number>
          ((d := <1or2digit>) (cons 'day d)))
         (<year>
          ((y := <2digit>) (cons 'year (+ 2000 y)))
          ((y := <4digit>) (cons 'year y)))
         (<slash-date>
          ((f := <1or2digit> '#\/ s := <1or2digit> '#\/ y := <2or4digit>)
           (list (cons 'year y) (cons 'locale-first f) (cons 'locale-second s)))
          ((f := <1or2digit> '#\/ s := <1or2digit>)
           (list (cons 'locale-first f) (cons 'locale-second s))))
         (<dot-date>
          ((y := <2or4digit> '#\. m := <1or2digit> '#\. d := <1or2digit>)
           (list (cons 'year y) (cons 'month m) (cons 'day d))))
         (<dash-date>
          ((y := <2or4digit> '#\- m := <1or2digit> '#\- d := <1or2digit>)
           (list (cons 'year y) (cons 'month m) (cons 'day d))))
         (<1or2digit>
          ((d := <1digit>) d)
          ((d := <2digit>) d))
         (<2or4digit>
          ((d := <2digit>) d)
          ((d := <4digit>) d))
         (<1digit>
          ((d := <digit> (! <digit>)) (chars->num d)))
         (<2digit>
          ((d1 := <digit> d2 := <digit> (! <digit>)) (chars->num d1 d2)))
         (<4digit>
          ((d1 := <digit> d2 := <digit> d3 := <digit> d4 := <digit> (! <digit>)) (chars->num d1 d2 d3 d4)))
         (<digit>
          ((d := (? char-numeric?)) d))
         (<space>
          (('#\space) #t))))

(define (parse-string str)
  (parse-result-semantic-value (<date> (packrat-string-results "<str>" str))))
(check-expect (parse-string "april 20, 2012") '((year . 2012) (month . 4) (day . 20)))
(check-expect (parse-string "april 21 2012") '((year . 2012) (month . 4) (day . 21)))
(check-expect (parse-string "22 april 2012") '((year . 2012) (month . 4) (day . 22)))
(check-expect (parse-string "23 april, 2012") '((year . 2012) (month . 4) (day . 23)))
(check-expect (parse-string "24 april") '((month . 4) (day . 24)))
(check-expect (parse-string "april 25") '((month . 4) (day . 25)))
(check-expect (parse-string "jan 1") '((month . 1) (day . 1)))
(check-expect (parse-string "26/10/2012") '((year . 2012) (locale-first . 26) (locale-second . 10)))
(check-expect (parse-string "26/10") '((locale-first . 26) (locale-second . 10)))
(check-expect (parse-string "2012-10-26") '((year . 2012) (month . 10) (day . 26)))
(check-expect (parse-string "next april") '((month . 4)))
(check-expect (parse-string "this january") '((month . 1)))
(check-expect (parse-string "on 27 april") '((month . 4) (day . 27)))
(check-expect (parse-string "on this january") #f)
; TODO
(check-expect (parse-string "friday") '((day-of-week 5)))
(check-expect (parse-string "on tuesday") '((day-of-week 2)))
(check-expect (parse-string "1st january") '((month . 1) (day . 1)))
(check-expect (parse-string "2nd february") '((month . 2) (day . 2)))
(check-expect (parse-string "3rd march") '((month . 3) (day . 3)))
(check-expect (parse-string "4th april") '((month . 4) (day . 4)))
(check-expect (parse-string "monday, 1st may, 2013") '((year . 2013) (month . 5) (day . 1) (day-of-week 1)))
(check-expect (parse-string "tuesday 2nd june 2013") '((year . 2013) (month . 6) (day . 2) (day-of-week 2)))

(test)