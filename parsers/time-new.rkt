#lang racket
(require
 (planet dvanhorn/packrat)
 "timezone.rkt"
 "util.rkt")

(require test-engine/racket-tests)

(define <time>
  (parse <time>
         (<time>
          (('#\a '#\t <space> t := <time-spec>) t)
          ((t := <time-spec>) t))
         (<time-spec>
          ((t := <time-base> <opt-space> z := <timezone-abbrev>)
           (append t (list (cons 'tz z))))
          ((t := <time-base> <opt-space> '#\+ z := <4digit>)
           (append t (list (list 'tz 'UTC z))))
          ((t := <time-base> <opt-space> '#\- z := <4digit>)
           (append t (list (list 'tz 'UTC (- 0 z)))))
          ((t := <time-base>) t))
         (<time-base>
          ((t := <time-hour-minute> <opt-space> '#\a '#\m)
           (let ((hour (car t))
                 (minute (cdr t)))
             (cond ((= hour 0) (error "hour too small"))
                   ((> hour 12) (error "hour too large"))
                   ((> minute 59) (error "minute too large"))
                   ((= hour 12) (list (cons 'hour 0)
                                      (cons 'minute minute)))
                   (else (list (cons 'hour hour)
                               (cons 'minute minute))))))
          ((t := <time-hour-minute> <opt-space> '#\p '#\m)
           (let ((hour (car t))
                 (minute (cdr t)))
             (cond ((= hour 0) (error "hour too small"))
                   ((> hour 12) (error "hour too large"))
                   ((> minute 59) (error "minute too large"))
                   ((< hour 12) (list (cons 'hour (+ 12 hour))
                                      (cons 'minute minute)))
                   (else (list (cons 'hour hour)
                               (cons 'minute minute))))))
          ((t := <time-hour-minute>)
           (let ((hour (car t))
                 (minute (cdr t)))
             (cond ((> hour 23) (error "hour too large"))
                   ((> minute 59) (error "minute too large"))
                   (else (list (cons 'hour hour)
                               (cons 'minute minute))))))
          ((h := <time-hour> <opt-space> '#\a '#\m)
           (cond ((= h 0) (error "hour too small"))
                 ((> h 12) (error "hour too large"))
                 ((= h 12) (list (cons 'hour 0) (cons 'minute 0)))
                 (else (list (cons 'hour h)))))
          ((h := <time-hour> <opt-space> '#\p '#\m)
           (cond ((= h 0) (error "hour too small"))
                 ((> h 12) (error "hour too large"))
                 ((< h 12) (list (cons 'hour (+ h 12))
                                 (cons 'minute 0)))
                 (else (list (cons 'hour h) (cons 'minute 0)))))
          (('#\n '#\o '#\o '#\n)
           (list (cons 'hour 12)
                 (cons 'minute 0)))
          (('#\m '#\i '#\d '#\d '#\a '#\y)
           (list (cons 'hour 12)
                 (cons 'minute 0)))
          (('#\m '#\i '#\d '#\n '#\i '#\g '#\h '#\t)
           (list (cons 'hour 0)
                 (cons 'minute 0))))
         (<time-hour>
          ((h := <1digit>) h)
          ((h := <2digit>) h))
         (<time-hour-minute>
          ((h := <time-hour> '#\: m := <2digit>)
           (cond ((> h 23) (error "hour too large"))
                 ((> m 59) (error "minute too large"))
                 (else (cons h m)))))
         (<1digit>
          ((d := <digit> (! <digit>)) (chars->num d)))
         (<2digit>
          ((d1 := <digit> d2 := <digit> (! <digit>)) (chars->num d1 d2)))
         (<4digit>
          ((d1 := <digit> d2 := <digit> d3 := <digit> d4 := <digit> (! <digit>)) (chars->num d1 d2 d3 d4)))
         (<digit>
          ((d := (? char-numeric?)) d))
         (<space>
          (('#\space) #t))
         (<opt-space>
          ((<space>) #t)
          (() #t))))

; Time tests
(define (parse-string str)
  (parse-result-semantic-value (<time> (packrat-string-results "<str>" str))))

(check-expect (parse-string "10:00") '((hour . 10) (minute . 0)))
(check-expect (parse-string "00:00") '((hour . 0) (minute . 0)))
(check-expect (parse-string "13:59") '((hour . 13) (minute . 59)))
(check-expect (parse-string "2:50") '((hour . 2) (minute . 50)))
(check-expect (parse-string "0:10") '((hour . 0) (minute . 10)))
(check-expect (parse-string "2:50am") '((hour . 2) (minute . 50)))
(check-expect (parse-string "2:50pm") '((hour . 14) (minute . 50)))
(check-expect (parse-string "12:45pm") '((hour . 12) (minute . 45)))
(check-expect (parse-string "1:45 pm") '((hour . 13) (minute . 45)))
(check-expect (parse-string "1:45pm aedt") '((hour . 13) (minute . 45) (tz AEDT +1100)))
(check-expect (parse-string "12am") '((hour . 0) (minute . 0)))
(check-expect (parse-string "12pm") '((hour . 12) (minute . 0)))
(check-expect (parse-string "1pm") '((hour . 13) (minute . 0)))
(check-error (parse-string "2:60") "minute too large")
(check-error (parse-string "25:20") "hour too large")
(check-error (parse-string "13:01pm") "hour too large")
(check-error (parse-string "13:01am") "hour too large")
(check-error (parse-string "2:60am") "minute too large")
(check-error (parse-string "2:60pm") "minute too large")
(check-error (parse-string "0:23am") "hour too small")
(check-error (parse-string "0:30pm") "hour too small")
(check-expect (parse-string "noon") '((hour . 12) (minute . 0)))
(check-expect (parse-string "midday") '((hour . 12) (minute . 0)))
(check-expect (parse-string "midnight") '((hour . 0) (minute . 0)))
(check-expect (parse-string "12:00 +1030") '((hour . 12) (minute . 0) (tz UTC 1030)))
(check-expect (parse-string "12:00 -1145") '((hour . 12) (minute . 0) (tz UTC -1145)))

(test)